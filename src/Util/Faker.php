<?php

/**
 * faker假数据
 * 演示：
dump(Faker::name()); // 姓名
dump(Faker::sex()); // 性别
dump(Faker::is()); // 1 - 0
dump(Faker::school('中职学校')); //学校
dump(Faker::company()); //公司
dump(Faker::bank()); //银行
dump(Faker::country()); //国家
dump(Faker::region()); //省市区
dump(Faker::province()); //省份
dump(Faker::city()); //城市
dump(Faker::area()); //地区
dump(Faker::mobile()); //手机
dump(Faker::idCard()); //身份证
dump(Faker::www()); //网址
dump(Faker::email()); //邮箱
dump(Faker::account()); //帐号
dump(Faker::ip()); //ipv4
 */
namespace Webguosai\Util;

use Webguosai\Helper\Arr;
use Webguosai\Helper\Str;

class Faker
{
    /**
     * 姓名
     */
    public static function name()
    {
        $last = [
            '李', '王', '张', '刘', '陈', '杨', '赵', '黄', '周', '吴',
            '徐', '孙', '胡', '朱', '高', '林', '何', '郭', '马', '罗',
            '梁', '宋', '郑', '谢', '韩', '唐', '冯', '于', '董', '萧',
            '程', '曹', '袁', '邓', '许', '傅', '沉', '曾', '彭', '吕',
            '苏', '卢', '蒋', '蔡', '贾', '丁', '林', '薛', '叶', '阎',
            '余', '潘', '杜', '戴', '夏', '钟', '汪', '田', '任', '姜',
            '范', '方', '石', '姚', '谭', '廖', '邹', '熊', '金', '陆',
            '郝', '孔', '白', '崔', '康', '毛', '邱', '秦', '江', '史',
            '顾', '侯', '邵', '孟', '龙', '万', '段', '雷', '钱', '汤',
            '尹', '黎', '易', '常', '武', '乔', '贺', '赖', '龚', '文',
            '庞', '樊', '兰', '殷', '施', '陶', '洪', '翟', '安', '颜',
            '倪', '严', '牛', '温', '芦', '季', '俞', '章', '鲁', '葛',
            '伍', '韦', '申', '尤', '毕', '聂', '丛', '焦', '向', '柳',
            '邢', '路', '岳', '齐', '沿', '梅', '莫', '庄', '辛', '管',
            '祝', '左', '涂', '谷', '祁', '时', '舒', '耿', '牟', '卜',
            '路', '詹', '关', '苗', '凌', '费', '纪', '靳', '盛', '童',
            '欧', '甄', '项', '曲', '成', '游', '阳', '裴', '席', '卫',
            '查', '屈', '鲍', '位', '覃', '霍', '翁', '隋', '植', '甘',
            '景', '薄', '单', '包', '司', '柏', '宁', '柯', '阮', '桂',
            '闵', '欧阳', '解', '强', '柴', '华', '车', '冉', '房', '边',
            '辜', '吉', '饶', '刁', '瞿', '戚', '丘', '古', '米', '池',
            '滕', '晋', '苑', '邬', '臧', '畅', '宫', '来', '嵺', '苟',
            '全', '褚', '廉', '简', '娄', '盖', '符', '奚', '木', '穆',
            '党', '燕', '郎', '邸', '冀', '谈', '姬', '屠', '连', '郜',
            '晏', '栾', '郁', '商', '蒙', '计', '喻', '揭', '窦', '迟',
            '宇', '敖', '糜', '鄢', '冷', '卓', '花', '仇', '艾', '蓝',
            '都', '巩', '稽', '井', '练', '仲', '乐', '虞', '卞', '封',
            '竺', '冼', '原', '官', '衣', '楚', '佟', '栗', '匡', '宗',
            '应', '台', '巫', '鞠', '僧', '桑', '荆', '谌', '银', '扬',
            '明', '沙', '薄', '伏', '岑', '习', '胥', '保', '和', '蔺',
            '虢'
        ];

        $man = [
            '伟', '强', '磊', '洋', '勇', '军', '杰', '涛', '超', '明',
            '刚', '平', '辉', '鹏', '华', '飞', '鑫', '波', '斌', '宇',
            '浩', '凯', '健', '俊', '帆', '帅', '旭', '宁', '龙', '林',
            '欢', '阳', '建华', '亮', '成', '畅', '建', '峰', '建国', '建军',
            '晨', '瑞', '志强', '兵', '雷', '东', '欣', '博', '彬', '坤',
            '全安', '荣', '岩', '杨', '文', '利', '楠', '建平', '嘉俊', '晧',
            '建明', '子安', '新华', '鹏程', '学明', '博涛', '捷', '文彬', '楼', '鹰',
            '松', '伦', '超', '钟', '瑜', '振国', '洪', '毅', '昱然', '哲',
            '翔', '翼', '祥', '国庆', '哲彦', '正诚', '正豪', '正平', '正业', '志诚',
            '志新', '志勇', '志明', '志强', '志文', '致远', '智明', '智勇', '智敏', '智渊',
            '赛'
        ];

        $woman = [
            '芳', '娜', '敏', '静', '敏静', '秀英', '丽', '洋', '艳', '娟',
            '文娟', '君', '文君', '珺', '霞', '明霞', '秀兰', '燕', '芬', '桂芬',
            '玲', '桂英', '丹', '萍', '华', '红', '玉兰', '桂兰', '英', '梅',
            '莉', '秀珍', '雪', '依琳', '旭', '宁', '婷', '馨予', '玉珍', '凤英',
            '晶', '欢', '玉英', '颖', '红梅', '佳', '倩', '琴', '兰英', '云',
            '洁', '爱华', '淑珍', '春梅', '海燕', '晨', '冬梅', '秀荣', '瑞', '桂珍',
            '莹', '秀云', '桂荣', '秀梅', '丽娟', '婷婷', '玉华', '琳', '雪梅', '淑兰',
            '丽丽', '玉', '秀芳', '欣', '淑英', '桂芳', '丽华', '丹丹', '桂香', '淑华',
            '秀华', '桂芝', '小红', '金凤', '文', '利', '楠', '红霞', '瑜', '桂花',
            '璐', '凤兰', '腊梅', '瑶', '嘉', '怡', '冰冰', '玉梅', '慧', '婕',
        ];

        $sex = self::sex();
        if ($sex == '男') {
            return Arr::random($last) . Arr::random($man);
        }
        return Arr::random($last) . Arr::random($woman);
    }

    public static function sex()
    {
        return Arr::random(['男', '女']);
    }

    public static function age()
    {
        return mt_rand(18, 75);
    }

    public static function is()
    {
        return mt_rand(0, 1);
    }

    public static function school($suffix = '大学')
    {
        return Arr::random([
            '北京', '天津', '河北', '山西',
            '内蒙古', '辽宁', '吉林',
            '黑龙江', '上海', '江苏',
            '浙江', '安徽', '福建', '江西',
            '山东', '河南', '湖北', '湖南',
            '广东', '广西壮族自治区', '海南',
            '重庆', '四川', '贵州', '云南',
            '西藏', '陕西', '甘肃', '青海',
            '宁夏', '新疆',
            '香港', '澳门', '台湾'
        ]) . $suffix;
    }

    public static function company()
    {
        $companyArr = [
            '超艺', '和泰', '九方', '鑫博腾飞', '戴硕电子',
            '济南亿次元', '海创', '创联世纪', '凌云', '泰麒麟',
            '彩虹', '兰金电子', '晖来计算机', '天益', '恒聪百汇',
            '菊风公司', '惠派国际公司', '创汇', '思优', '时空盒数字',
            '易动力', '飞海科技', '华泰通安', '盟新', '商软冠联',
            '图龙信息', '易动力', '华远软件', '创亿', '时刻',
            '开发区世创', '明腾', '良诺', '天开', '毕博诚', '快讯',
            '凌颖信息', '黄石金承', '恩悌', '雨林木风计算机',
            '双敏电子', '维旺明', '网新恒天', '数字100', '飞利信',
            '立信电子', '联通时科', '中建创业', '新格林耐特',
            '新宇龙信息', '浙大万朋', 'MBP软件', '昂歌信息',
            '万迅电脑', '方正科技', '联软', '七喜', '南康', '银嘉',
            '巨奥', '佳禾', '国讯', '信诚致远', '浦华众城', '迪摩',
            '太极', '群英', '合联电子', '同兴万点', '襄樊地球村',
            '精芯', '艾提科信', '昊嘉', '鸿睿思博', '四通', '富罳',
            '商软冠联', '诺依曼软件', '东方峻景', '华成育卓', '趋势',
            '维涛', '通际名联'
        ];

        $suffix = ['科技', '网络', '信息', '传媒'];

        return Arr::random($companyArr) . Arr::random($suffix) . '有限公司';
    }

    public static function bank()
    {
        return Arr::random([
            '渤海银行',
            '广发银行',
            '国家开发银行',
            '恒丰银行',
            '华夏银行',
            '交通银行',
            '平安银行',
            '上海浦东发展银行',
            '兴业银行',
            '招商银行',
            '浙商银行',
            '中国工商银行',
            '中国光大银行',
            '中国建设银行',
            '中国民生银行',
            '中国农业银行',
            '中国银行',
            '中国邮政储蓄银行',
            '中信银行',
        ]);
    }

    public static function country()
    {
        return Arr::random([
            '阿富汗', '阿拉斯加', '阿尔巴尼亚', '阿尔及利亚',
            '安道尔', '安哥拉', '安圭拉岛英', '安提瓜和巴布达',
            '阿根廷', '亚美尼亚', '阿鲁巴岛', '阿森松', '澳大利亚',
            '奥地利', '阿塞拜疆', '巴林', '孟加拉国', '巴巴多斯',
            '白俄罗斯', '比利时', '伯利兹', '贝宁', '百慕大群岛',
            '不丹', '玻利维亚', '波斯尼亚和黑塞哥维那', '博茨瓦纳',
            '巴西', '保加利亚', '布基纳法索', '布隆迪', '喀麦隆',
            '加拿大', '加那利群岛', '佛得角', '开曼群岛', '中非',
            '乍得', '智利', '圣诞岛', '科科斯岛', '哥伦比亚',
            '巴哈马国', '多米尼克国', '科摩罗', '刚果', '科克群岛',
            '哥斯达黎加', '克罗地亚', '古巴', '塞浦路斯', '捷克',
            '丹麦', '迪戈加西亚岛', '吉布提', '多米尼加共和国',
            '厄瓜多尔', '埃及', '萨尔瓦多', '赤道几内亚',
            '厄立特里亚', '爱沙尼亚', '埃塞俄比亚', '福克兰群岛',
            '法罗群岛', '斐济', '芬兰', '法国', '法属圭亚那',
            '法属波里尼西亚', '加蓬', '冈比亚', '格鲁吉亚', '德国',
            '加纳', '直布罗陀', '希腊', '格陵兰岛', '格林纳达',
            '瓜德罗普岛', '关岛', '危地马拉', '几内亚', '几内亚比绍',
            '圭亚那', '海地', '夏威夷', '洪都拉斯', '匈牙利', '冰岛',
            '印度', '印度尼西亚', '伊郎', '伊拉克', '爱尔兰', '以色列',
            '意大利', '科特迪瓦', '牙买加', '日本', '约旦', '柬埔塞',
            '哈萨克斯坦', '肯尼亚', '基里巴斯', '朝鲜', '韩国', '科威特',
            '吉尔吉斯斯坦', '老挝', '拉脱维亚', '黎巴嫩', '莱索托',
            '利比里亚', '利比亚', '列支敦士登', '立陶宛', '卢森堡',
            '马其顿', '马达加斯加', '马拉维', '马来西亚', '马尔代夫',
            '马里', '马耳他', '马里亚纳群岛', '马绍尔群岛', '马提尼克',
            '毛里塔尼亚', '毛里求斯', '马约特岛', '墨西哥', '密克罗尼西亚',
            '中途岛', '摩尔多瓦', '摩纳哥', '蒙古', '蒙特塞拉特岛',
            '摩洛哥', '莫桑比克', '缅甸', '纳米比亚', '瑙鲁', '尼泊尔',
            '荷兰', '荷属安的列斯群岛', '新喀里多尼亚群岛', '新西兰',
            '尼加拉瓜', '尼日尔', '尼日利亚', '纽埃岛', '诺福克岛',
            '挪威', '阿曼', '帕劳', '巴拿马', '巴布亚新几内亚', '巴拉圭',
            '秘鲁', '菲律宾', '波兰', '葡萄牙', '巴基斯坦', '波多黎各',
            '卡塔尔', '留尼汪岛', '罗马尼亚', '俄罗斯', '卢旺达',
            '东萨摩亚', '西萨摩亚', '圣马力诺', '圣皮埃尔岛及密克隆岛',
            '圣多美和普林西比', '沙特阿拉伯', '塞内加尔', '塞舌尔',
            '新加坡', '斯洛伐克', '斯洛文尼亚', '所罗门群岛', '索马里',
            '南非', '西班牙', '斯里兰卡', '圣克里斯托弗和尼维斯',
            '圣赫勒拿', '圣卢西亚', '圣文森特岛', '苏丹', '苏里南',
            '斯威士兰', '瑞典', '瑞士', '叙利亚', '塔吉克斯坦', '坦桑尼亚',
            '泰国', '阿拉伯联合酋长国', '多哥', '托克劳群岛', '汤加',
            '特立尼达和多巴哥', '突尼斯', '土耳其', '土库曼斯坦',
            '特克斯和凯科斯群岛(', '图瓦卢', '美国', '乌干达', '乌克兰',
            '英国', '乌拉圭', '乌兹别克斯坦', '瓦努阿图', '梵蒂冈',
            '委内瑞拉', '越南', '维尔京群岛', '维尔京群岛和圣罗克伊',
            '威克岛', '瓦里斯和富士那群岛', '西撒哈拉', '也门', '南斯拉夫',
            '扎伊尔', '赞比亚', '桑给巴尔', '津巴布韦', '中华人民共和国', '中国'
        ]);
    }

    public static function region($separate = ' ') {
        return implode($separate, [
            self::province(), self::city(), self::area()
        ]);
    }

    public static function province()
    {
        return Arr::random([
            '北京市', '天津市', '河北省', '山西省',
            '内蒙古自治区', '辽宁省', '吉林省',
            '黑龙江省', '上海市', '江苏省',
            '浙江省', '安徽省', '福建省', '江西省',
            '山东省', '河南省', '湖北省', '湖南省',
            '广东省', '广西壮族自治区', '海南省',
            '重庆市', '四川省', '贵州省', '云南省',
            '西藏自治区', '陕西省', '甘肃省', '青海省',
            '宁夏回族自治区', '新疆维吾尔自治区',
            '香港特别行政区', '澳门特别行政区', '台湾省'
        ]);
    }

    public static function city()
    {
        return Arr::random([
            '北京', '上海', '天津', '重庆',
            '哈尔滨', '长春', '沈阳', '呼和浩特',
            '石家庄', '乌鲁木齐', '兰州', '西宁',
            '西安', '银川', '郑州', '济南',
            '太原', '合肥', '武汉', '长沙',
            '南京', '成都', '贵阳', '昆明',
            '南宁', '拉萨', '杭州', '南昌',
            '广州', '福州', '海口',
            '香港', '澳门'
        ]);
    }

    public static function area()
    {
        return Arr::random([
            '西夏区', '永川区', '秀英区', '高港区',
            '清城区', '兴山区', '锡山区', '清河区',
            '龙潭区', '华龙区', '海陵区', '滨城区',
            '东丽区', '高坪区', '沙湾区', '平山区',
            '城北区', '海港区', '沙市区', '双滦区',
            '长寿区', '山亭区', '南湖区', '浔阳区',
            '南长区', '友好区', '安次区', '翔安区',
            '沈河区', '魏都区', '西峰区', '萧山区',
            '金平区', '沈北新区', '孝南区', '上街区',
            '城东区', '牧野区', '大东区', '白云区',
            '花溪区', '吉利区', '新城区', '怀柔区',
            '六枝特区', '涪城区', '清浦区', '南溪区',
            '淄川区', '高明区', '金水区', '中原区',
            '高新开发区', '经济开发新区', '新区'
        ]);
    }

    /**
     * 电话
     * @return string
     */
    public static function mobile()
    {
        return '1' . Arr::random([3, 4, 5, 6, 7, 8, 9]) . Str::padding(mt_rand(1, 999999999), 9, '0');
    }

    /**
     * 身份证号
     * @return string
     */
    public static function idCard()
    {
        return '43' .
            Str::padding(mt_rand(1, 9999), 4) .
            mt_rand(1920, date('Y')) .
            Str::padding(mt_rand(1, 12)) .
            Str::padding(mt_rand(1, 31)) .
            Str::padding(mt_rand(1, 999)) .
            Arr::random([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'X', 'x']);
    }

    public static function www()
    {
        $domain = [
            'taobao.com', 'baidu.com', 'douyin.com', '126.com', '163.com', 'qq.com', 'sohu.com', 'sina.com'
        ];
        $tld = [
            'com', 'com', 'com', 'com', 'com', 'com', 'biz', 'info', 'net', 'org', 'cn',
            'com.cn', 'edu.cn', 'net.cn', 'biz.cn', 'gov.cn', 'org.cn'
        ];
        $protocol = [
            'http', 'https'
        ];
        return Arr::random($protocol) . '://' .
            Arr::random($domain) . '.' .
            Arr::random($tld);
    }

    public static function email()
    {
        $domain = [
            'taobao.com', 'baidu.com', 'douyin.com', '126.com', '163.com', 'qq.com', 'sohu.com', 'sina.com'
        ];

        return self::account(). '@' . Arr::random($domain);
    }

    public static function account($min = 6, $max = 18)
    {
        return Str::lower(Str::random(mt_rand($min, $max),5));
    }

    public static function ip($type = 4)
    {
        // 默认为国内 ipv4
        $ipLong = array(
            array('607649792', '608174079'), //36.56.0.0-36.63.255.255
            array('975044608', '977272831'), //58.30.0.0-58.63.255.255
            array('999751680', '999784447'), //59.151.0.0-59.151.127.255
            array('1019346944', '1019478015'), //60.194.0.0-60.195.255.255
            array('1038614528', '1039007743'), //61.232.0.0-61.237.255.255
            array('1783627776', '1784676351'), //106.80.0.0-106.95.255.255
            array('1947009024', '1947074559'), //116.13.0.0-116.13.255.255
            array('1987051520', '1988034559'), //118.112.0.0-118.126.255.255
            array('2035023872', '2035154943'), //121.76.0.0-121.77.255.255
            array('2078801920', '2079064063'), //123.232.0.0-123.235.255.255
            array('-1950089216', '-1948778497'), //139.196.0.0-139.215.255.255
            array('-1425539072', '-1425014785'), //171.8.0.0-171.15.255.255
            array('-1236271104', '-1235419137'), //182.80.0.0-182.92.255.255
            array('-770113536', '-768606209'), //210.25.0.0-210.47.255.255
            array('-569376768', '-564133889'), //222.16.0.0-222.95.255.255
        );
        $randKey   = mt_rand(0, 14);
        $ipV4 =  long2ip(mt_rand($ipLong[$randKey][0], $ipLong[$randKey][1]));

        if ($type == 6) {
            if(preg_match('%^(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})$%', $ipV4, $match)){
                $IPParts = array();
                for($i=1; $i<=4; $i++){
                    $IPPart = (int)$match[$i];
                    $IPParts[$i] = str_pad(decHex($IPPart), 2, '0', STR_PAD_LEFT);
                }
                return '0:0:0:0:0:ffff:' . $IPParts[1] . $IPParts[2] . ':' . $IPParts[3] . $IPParts[4];
            }
        }

        return $ipV4;
    }
}